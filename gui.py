# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'NuDAS.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtWidgets import QFileDialog, QMessageBox, QSizePolicy, QInputDialog, QVBoxLayout, QSlider, QHBoxLayout, QTextEdit, QTableWidget, QHeaderView, QTableWidgetItem
from NuDAS import NuDAS

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.pyplot as plt

import random


class Ui_MainWindow(object):
    # gui+
    def __init__(self):
        self.nudas = NuDAS()
        self.stimulus_file_path = ""
        self.spike_times_file_path = ""
        self.data_display_hbox = None
        self.spike_bin_graphs = None
        self.tables_vbox = None
        self.stimulus_table = None
        self.spike_table = None

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(2000, 1500)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 2000, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuTools = QtWidgets.QMenu(self.menubar)
        self.menuTools.setObjectName("menuTools")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpenStimulus = QtWidgets.QAction(MainWindow)
        self.actionOpenStimulus.setObjectName("actionOpenStimulus")
        self.actionOpenSpikes = QtWidgets.QAction(MainWindow)
        self.actionOpenSpikes.setObjectName("actionOpenSpikes")
        self.actionBinning = QtWidgets.QAction(MainWindow)
        self.actionBinning.setObjectName("actionBinning")
        self.actionZ_Score = QtWidgets.QAction(MainWindow)
        self.actionZ_Score.setObjectName("actionZ_Score")
        # gui+ ->
        self.actionCorrelationMatrix = QtWidgets.QAction(MainWindow)
        self.actionCorrelationMatrix.setObjectName("actionCorrelationMatrix")
        self.actionCustomFunction = QtWidgets.QAction(MainWindow)
        self.actionCustomFunction.setObjectName("actionCustomFunction")
        # <-
        self.menuFile.addAction(self.actionOpenStimulus)
        self.menuFile.addAction(self.actionOpenSpikes)
        self.menuTools.addAction(self.actionBinning)
        self.menuTools.addAction(self.actionZ_Score)
        # gui+ ->
        self.menuTools.addAction(self.actionCorrelationMatrix)
        self.menuTools.addAction(self.actionCustomFunction)
        # <-
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # gui+
        # File connections
        self.actionOpenStimulus.triggered. \
            connect(lambda: self.open_file_dialog("Open Stimulus File", "Image Files (*.mat)", 0))
        self.actionOpenSpikes.triggered. \
            connect(lambda: self.open_file_dialog("Open Action Potential File", "Image Files (*.mat)", 1))

        # Tools connections
        self.actionBinning.triggered. \
            connect(lambda: self.bin_data())

        self.actionZ_Score.triggered. \
            connect(lambda: self.z_score())

        self.actionCorrelationMatrix.triggered. \
            connect(lambda: self.correlation_matrix())

        self.actionCustomFunction.triggered. \
            connect(lambda: self.correlation_matrix())

        # Graph UI elements
        # i want to move this into another function however the graph never
        # shows when i move it outside of this function. therefore i think
        # that i need to find some kind of update gui function after i add the graph object
        # as a parent

        # self.data_display_hbox = QHBoxLayout(self.centralwidget)

        # self.stimulus_table = QTableWidget(self.centralwidget)

        # scaling is not working for some reason with this widget theres like a maximum size
        # self.tables_widget = QtWidgets.QWidget(self.centralwidget)
        # self.tables_widget.resize(1000, 1500)
        # print("maximum size")
        # print(self.tables_widget.maximumSize())
        # print(self.tables_widget.size())

        # self.stimulus_table = QTableWidget(self.tables_widget)
        # self.stimulus_table = QTableWidget(self.centralwidget)
        self.stimulus_table = QTableWidget()
        self.stimulus_table.setRowCount(0)
        self.stimulus_table.setColumnCount(0)

        self.stimulus_table.horizontalHeader().setStretchLastSection(True)
        # self.stimulus_table.horizontalHeader().setStretchLastSection(False)
        # self.stimulus_table.resize(1000, 1500)
        self.stimulus_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        self.scale_slider = QSlider(QtCore.Qt.Horizontal, self.centralwidget)


        self.tables_vbox = QVBoxLayout(self.centralwidget)
        # self.tables_vbox.setSizeConstraint()
        # self.tables_vbox = QVBoxLayout()
        self.tables_vbox.addWidget(self.stimulus_table)
        self.tables_vbox.addWidget(self.scale_slider)
        # self.data_display_hbox.addLayout(self.tables_vbox)

        # self.data_display_hbox.addWidget(QtWidgets.QWidget)
        print(self.centralwidget.width()) # 100
        print(self.centralwidget.height()) # 30
        self.spike_bin_graphs = PlotCanvas(self.centralwidget, width=10,
                                           height=15)
        # self.data_display_hbox.addWidget(self.spike_bin_graphs)

        self.spike_bin_graphs.move(1000, 0)

        # self.custom_analysis()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuTools.setTitle(_translate("MainWindow", "Tools"))
        self.actionOpenStimulus.setText(_translate("MainWindow", "Open Stimulus File"))
        self.actionOpenStimulus.setStatusTip(
            _translate("MainWindow", "Imports and displays the .mat file containing the trigger stimulus data."))
        self.actionOpenSpikes.setText(_translate("MainWindow", "Open Spikes File"))
        self.actionBinning.setText(_translate("MainWindow", "Binning"))
        self.actionZ_Score.setText(_translate("MainWindow", "Z-Score"))
        # gui+
        self.actionCorrelationMatrix.setText(_translate("MainWindow", "Correlation Matrix"))

    # gui+
    def open_file_dialog(self, c, f, dialog_type):
        if dialog_type == 0:
            self.stimulus_file_path, x = QFileDialog.getOpenFileName(self.centralwidget,
                                                                     c,
                                                                     "/home",
                                                                     f)
            # print(self.stimulus_file_path)
            # CHANGED TK:
            # self.nudas.load_stimulus(self.stimulus_file_path)
            self.nudas.stimulus_to_npy_tk(self.stimulus_file_path)
        elif dialog_type == 1:
            self.spike_times_file_path, x = QFileDialog.getOpenFileName(self.centralwidget,
                                                                        c,
                                                                        "/home",
                                                                        f)
            # print(self.spike_times_file_path)
            # CHANGED TK:
            # self.nudas.load_spike_times(self.spike_times_file_path)
            self.nudas.spike_times_to_npy_tk(self.spike_times_file_path)

    # gui+
    # c is for comb. it's like some kind of matplotlib backend for embedding graphs
    def bin_data(self, c=0):
        if self.stimulus_file_path == "" or self.spike_times_file_path == "":
            msg = "First, you must load the stimulus and action potential data (which can be accessed under the " + \
                  "File menu) to bin any data"
            msg_box = QMessageBox()
            msg_box.setIcon(QMessageBox.Information)
            msg_box.setText(msg)
            msg_box.exec_()
        else:
            # TODO tw or time_window will have to be a user specified value from the GUI
            bin_window = 100
            # start_time, okPressed = QInputDialog.getInt(self.centralwidget, "Starting Time", "Milliseconds:", 0, 0,
            #                                             10000, 1)
            # end_time, okPressed = QInputDialog.getInt(self.centralwidget, "Ending Time", "Milliseconds:", 100, 0,
            #                                             10000, 1)
            bin_window, okPressed = QInputDialog.getInt(self.centralwidget, "Time Window", "Milliseconds:", 100, 0, 10000, 1)
            spt_mat = self.nudas.bin_data_tk(bin_window)
            dim = spt_mat.shape
            print(dim)
            self.stimulus_table.setRowCount(dim[1])
            self.stimulus_table.setColumnCount(dim[0])
            print(self.stimulus_table)

            for i in range(dim[1]):
                for j in range(dim[0]):
                    table_item = QTableWidgetItem(str(spt_mat[j][i]))
                    self.stimulus_table.setItem(i, j, table_item)

            self.spike_bin_graphs.plot_binned_data(spt_mat, bin_window)
            print(spt_mat)
            return

            # EVERYTHING ABOVE IS FROM TK

            # we also likely require input for which neuron you would like to do binning on and which stimulus
            # trial we are currently using
            stimulus_trial_idx = 0
            neuron_idx = 0
            tw = 1
            dmr = 1
            bin_window = tw * 0.001
            # neural_data_path = np.load('./neural_data_path.npy', allow_pickle=True)
            # neural_data_path = str(neural_data_path)
            # print('path:::' + neural_data_path)

            self.nudas.bin_spike_matrix(neuron_idx, 1000, False)

            # Graph UI elements
            self.spike_bin_graphs.plot_1D(self.nudas.spike_binned_mat)
            # self.spike_bin_graphs = PlotCanvas(self.centralwidget, width=5, height=4)
            # self.spike_bin_graphs.move(0, 0)

            # ALL OF THIS BELOW HERE IS PLOTTING THE RESULT FROM spike_matrix
            # # fig = Figure(figsize = (5, 5),dpi = 100)
            # c = comb[1]
            # fig = comb[0]
            # plot1 = fig.add_subplot(111)
            # plt.title('Density plot (time window=' + str(tw) + ' ms')
            # plot1.clear()
            # plot1.imshow(spt_mat, origin='lower left', aspect='auto', interpolation=None, cmap='cividis')
            # # canvas = FigureCanvasTkAgg(fig,master = root,tag={'cvs'})
            # c.draw()
            # # placing the canvas on the Tkinter window
            # c.get_tk_widget().pack()
            # # canvas.delete('all')
            # np.save('spike_matrix.npy', spt_mat)

    # gui+
    def z_score(self):
        z_scored_mat = self.nudas.z_scoring_tk()
        # print(self.nudas.z_scoring_tk())
        # graph this
        self.spike_bin_graphs.plot_z_norm(z_scored_mat)

    # gui+
    def correlation_matrix(self):
        cov_mat = self.nudas.covariance_matrix()
        # graph the covariance matrix
        if cov_mat is not None:
            self.spike_bin_graphs.plot_correlation_matrix(cov_mat)

        # z_scored_mat=np.load('./z_scored_matrix.npy',allow_pickle=True)
        # cov_mat=cov_matrix(z_scored_mat)
        # #fig = Figure(figsize = (5, 5),dpi = 100)
        # c=comb[1]
        # fig=comb[0]
        # plot1= fig.add_subplot(111)
        # plot1.clear()
        # # CHANGED:
        # # plot1.imshow(cov_mat, origin='lower left', aspect='auto', interpolation=None, cmap='cividis')
        # plot1.imshow(cov_mat,origin='lower',aspect='auto',interpolation=None,cmap='cividis')
        # #canvas = FigureCanvasTkAgg(fig,master = root)
        # c.draw()
        # # placing the canvas on the Tkinter window
        # c.get_tk_widget().pack()
        # np.save('correlation_matrix.npy',cov_mat)

#     # gui+
#     def custom_analysis(self, filepath=""):
# #         exec("""def a(x):
# # #    return x+1
# # # print(a(2))""")
#
#         with open(filepath, 'r') as reader:
#              # Read & print the entire file
#              # retreive the parameters from the function
#              # ask teh user for the values for these parameters
#              # insert these parameters into the string
#              # exec() the modified string
#              code = reader.read()
#              exec(code)
#              print(reader.read())
#         # exec()
#         return

# gui+
# subplot indexing: https://www.codespeedy.com/use-add_subplot-in-matplotlib/#:~:text=The%20add_subplot%20%28%29%20has%203%20arguments.%20The%20first,above%20is%3A%20from%20matplotlib%20import%20pyplot%20as%20plt
# self.figure.add_subplot(rows in grid, cols in grid, idx)
class PlotCanvas(FigureCanvas):
    def __init__(self, parent=None, width=5, height=10, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        # self.axes = fig.add_subplot(111)

        FigureCanvas.__init__(self, fig)
        self.setParent(parent)

        FigureCanvas.setSizePolicy(self, QSizePolicy.Expanding, QSizePolicy.Expanding)
        FigureCanvas.updateGeometry(self)

    def plot_1D(self, binned_data):
        keys = list(binned_data)
        i = 1
        for k in keys:
            ax = self.figure.add_subplot(len(keys), 1, i)
            ax.plot(binned_data[k], 'r-')
            ax.set_title('Neuron ' + str(k))
            i += 1
        self.draw()

    def plot(self):
        data = [random.random() for i in range(25)]
        ax = self.figure.add_subplot(211)
        ax.plot(data, 'r-')
        ax.set_title('PyQt Matplotlib Example')
        self.draw()

    def plot_binned_data(self, spt_mat, tw):
        plot1 = self.figure.add_subplot(311)
        plot1.clear()
        plot1.set_title('Density plot (time window=' + str(tw) + ' ms')
        plot1.imshow(spt_mat, origin='lower', aspect='auto', interpolation=None, cmap='cividis')
        plot1.set_ylabel("Neuron Index")
        plot1.set_xlabel("Sample Index")
        self.draw()

    def plot_z_norm(self, z_norm_mat):
        plot1 = self.figure.add_subplot(312)
        plot1.clear()
        plot1.set_title('Z-Normed Data')
        plot1.imshow(z_norm_mat, origin='lower', aspect='auto', interpolation=None, cmap='cividis')
        plot1.set_ylabel("Neuron Index")
        plot1.set_xlabel("Sample Index")
        self.draw()

    def plot_correlation_matrix(self, cov_mat):
        plot1 = self.figure.add_subplot(313)
        plot1.clear()
        plot1.set_title('Correlation Matrix')
        plot1.imshow(cov_mat, origin='lower', aspect='auto', interpolation=None, cmap='cividis')
        plot1.set_ylabel("Neuron Index")
        plot1.set_xlabel("Sample Index")
        self.draw()


# STARTING POINT
if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
