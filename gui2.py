# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'NuDAS.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
# gui+
from NuDAS import NuDAS
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import random
import os


class Ui_MainWindow(object):

    # gui+
    def __init__(self):
        self.nudas = NuDAS()
        self.stimulus_file_path = ""
        self.spike_times_file_path = ""
        self.data_display_hbox = None
        self.graphs = None
        self.tables_vbox = None
        self.stimulus_table = None
        self.spike_table = None

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(2000, 1500)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 1981, 1361))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.tableWidget = QtWidgets.QTableWidget(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tableWidget.sizePolicy().hasHeightForWidth())
        self.tableWidget.setSizePolicy(sizePolicy)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.horizontalHeader().setStretchLastSection(False)
        self.verticalLayout_2.addWidget(self.tableWidget)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.spinBox_2 = QtWidgets.QSpinBox(self.horizontalLayoutWidget)
        self.spinBox_2.setObjectName("spinBox_2")
        self.horizontalLayout_2.addWidget(self.spinBox_2)
        self.spinBox = QtWidgets.QSpinBox(self.horizontalLayoutWidget)
        self.spinBox.setObjectName("spinBox")
        self.horizontalLayout_2.addWidget(self.spinBox)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.verticalLayout_2.setStretch(1, 1)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalSlider_2 = QtWidgets.QSlider(self.horizontalLayoutWidget)
        self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_2.setObjectName("horizontalSlider_2")
        self.verticalLayout.addWidget(self.horizontalSlider_2)
        self.horizontalSlider = QtWidgets.QSlider(self.horizontalLayoutWidget)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.verticalLayout.addWidget(self.horizontalSlider)
        self.widget = QtWidgets.QWidget(self.horizontalLayoutWidget)
        self.widget.setObjectName("widget")
        # gui+ ->
        self.graphs = PlotCanvas(self.widget, width=10,
                                           height=15)
        # gui+ <-
        self.verticalLayout.addWidget(self.widget)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.horizontalLayout.setStretch(0, 1)
        self.horizontalLayout.setStretch(1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        # status and menu bars...
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 2000, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuTools = QtWidgets.QMenu(self.menubar)
        self.menuTools.setObjectName("menuTools")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpenStimulus = QtWidgets.QAction(MainWindow)
        self.actionOpenStimulus.setObjectName("actionOpenStimulus")
        self.actionOpenSpikes = QtWidgets.QAction(MainWindow)
        self.actionOpenSpikes.setObjectName("actionOpenSpikes")
        self.actionBinning = QtWidgets.QAction(MainWindow)
        self.actionBinning.setObjectName("actionBinning")
        self.actionZ_Score = QtWidgets.QAction(MainWindow)
        self.actionZ_Score.setObjectName("actionZ_Score")
        # gui+ ->
        self.actionCorrelationMatrix = QtWidgets.QAction(MainWindow)
        self.actionCorrelationMatrix.setObjectName("actionCorrelationMatrix")
        # <-
        self.menuFile.addAction(self.actionOpenStimulus)
        self.menuFile.addAction(self.actionOpenSpikes)
        self.menuTools.addAction(self.actionBinning)
        self.menuTools.addAction(self.actionZ_Score)
        # gui+ ->
        self.menuTools.addAction(self.actionCorrelationMatrix)
        # <-
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # gui+
        # File connections
        self.actionOpenStimulus.triggered. \
            connect(lambda: self.open_file_dialog("Open Stimulus File", "Image Files (*.mat)", 0))
        self.actionOpenSpikes.triggered. \
            connect(lambda: self.open_file_dialog("Open Action Potential File", "Image Files (*.mat)", 1))

        # Tools connections
        self.actionBinning.triggered. \
            connect(lambda: self.bin_data())

        self.actionZ_Score.triggered. \
            connect(lambda: self.z_score())

        self.actionCorrelationMatrix.triggered. \
            connect(lambda: self.correlation_matrix())

        # qui+
        self.label.setText("No Binned Data to Display")
        # Sliders connections
        # top
        self.horizontalSlider_2.setValue(0)
        self.horizontalSlider_2.valueChanged.connect(lambda: self.top_slider_changed())
        # bottom
        self.horizontalSlider.setValue(99)
        self.horizontalSlider.valueChanged.connect(lambda: self.bottom_slider_changed())



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "TextLabel"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuTools.setTitle(_translate("MainWindow", "Tools"))
        self.actionOpenStimulus.setText(_translate("MainWindow", "Open Stimulus File"))
        self.actionOpenStimulus.setStatusTip(_translate("MainWindow", "Imports and displays the .mat file containing the trigger stimulus data."))
        self.actionOpenSpikes.setText(_translate("MainWindow", "Open Spikes File"))
        self.actionBinning.setText(_translate("MainWindow", "Binning"))
        self.actionZ_Score.setText(_translate("MainWindow", "Z-Score"))
        # gui+
        self.actionCorrelationMatrix.setText(_translate("MainWindow", "Correlation Matrix"))

    # gui+
    def open_file_dialog(self, c, f, dialog_type):
        if dialog_type == 0:
            self.stimulus_file_path, x = QtWidgets.QFileDialog.getOpenFileName(self.centralwidget,
                                                                     c,
                                                                     "/home",
                                                                     f)
            # print(self.stimulus_file_path)
            # CHANGED TK:
            # self.nudas.load_stimulus(self.stimulus_file_path)
            self.nudas.stimulus_to_npy_tk(self.stimulus_file_path)
        elif dialog_type == 1:
            self.spike_times_file_path, x = QtWidgets.QFileDialog.getOpenFileName(self.centralwidget,
                                                                        c,
                                                                        "/home",
                                                                        f)
            # print(self.spike_times_file_path)
            # CHANGED TK:
            # self.nudas.load_spike_times(self.spike_times_file_path)
            self.nudas.spike_times_to_npy_tk(self.spike_times_file_path)

    # gui+
    # c is for comb. it's like some kind of matplotlib backend for embedding graphs
    def bin_data(self, c=0):
        if self.stimulus_file_path == "" or self.spike_times_file_path == "":
            msg = "First, you must load the stimulus and action potential data (which can be accessed under the " + \
                  "File menu) to bin any data"
            msg_box = QtWidgets.QMessageBox()
            msg_box.setIcon(QtWidgets.QMessageBox.Information)
            msg_box.setText(msg)
            msg_box.exec_()
        else:
            # TODO tw or time_window will have to be a user specified value from the GUI
            bin_window = 100
            # start_time, okPressed = QInputDialog.getInt(self.centralwidget, "Starting Time", "Milliseconds:", 0, 0,
            #                                             10000, 1)
            # end_time, okPressed = QInputDialog.getInt(self.centralwidget, "Ending Time", "Milliseconds:", 100, 0,
            #                                             10000, 1)
            bin_window, okPressed = QtWidgets.QInputDialog.getInt(self.centralwidget, "Time Window", "Milliseconds:", 100, 0, 10000, 1)
            self.nudas.bin_window = bin_window
            spt_mat = self.nudas.bin_data_tk(bin_window)
            dim = spt_mat.shape
            print(dim)
            self.tableWidget.setRowCount(dim[1])
            self.tableWidget.setColumnCount(dim[0])
            print(self.tableWidget)

            table_title = "File: " + os.path.basename(self.spike_times_file_path)
            table_title = table_title + "\nNumber of Neurons: " + str(dim[0]) + "\nNumber of Time Bins: " + str(dim[1])
            self.label.setText(table_title)
            for i in range(dim[1]):
                for j in range(dim[0]):
                    table_item = QtWidgets.QTableWidgetItem(str(spt_mat[j][i]))
                    self.tableWidget.setItem(i, j, table_item)

            self.graphs.plot_binned_data(spt_mat, bin_window)
            print(spt_mat)
            return

    # gui+
    def z_score(self):
        z_scored_mat = self.nudas.z_scoring_tk()
        # print(self.nudas.z_scoring_tk())
        # graph this
        self.graphs.plot_z_norm(z_scored_mat)

    # gui+
    def correlation_matrix(self):
        cov_mat = self.nudas.covariance_matrix()
        # graph the covariance matrix
        if cov_mat is not None:
            self.graphs.plot_correlation_matrix(cov_mat)

    #gui+
    def top_slider_changed(self):
        top_val = self.horizontalSlider_2.value()
        bot_val = self.horizontalSlider.value()
        if top_val >= bot_val:
            self.horizontalSlider_2.setValue(bot_val-1)
        if self.nudas.bin_window != -1:
            self.graphs.plot_ranged_binned_data(self.nudas.bin_data_tk(self.nudas.bin_window), top_val, bot_val, self.nudas.bin_window)
        print(top_val)

    # gui+
    def bottom_slider_changed(self):
        bot_val = self.horizontalSlider.value()
        top_val = self.horizontalSlider_2.value()
        if top_val >= bot_val:
            self.horizontalSlider.setValue(top_val+1)
        print(bot_val)


# gui+
# subplot indexing: https://www.codespeedy.com/use-add_subplot-in-matplotlib/#:~:text=The%20add_subplot%20%28%29%20has%203%20arguments.%20The%20first,above%20is%3A%20from%20matplotlib%20import%20pyplot%20as%20plt
# self.figure.add_subplot(rows in grid, cols in grid, idx)
class PlotCanvas(FigureCanvas):
    def __init__(self, parent=None, width=5, height=10, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        # self.axes = fig.add_subplot(111)

        FigureCanvas.__init__(self, fig)
        self.setParent(parent)

        FigureCanvas.setSizePolicy(self, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        FigureCanvas.updateGeometry(self)

    def plot_1D(self, binned_data):
        keys = list(binned_data)
        i = 1
        for k in keys:
            ax = self.figure.add_subplot(len(keys), 1, i)
            ax.plot(binned_data[k], 'r-')
            ax.set_title('Neuron ' + str(k))
            i += 1
        self.draw()

    def plot(self):
        data = [random.random() for i in range(25)]
        ax = self.figure.add_subplot(211)
        ax.plot(data, 'r-')
        ax.set_title('PyQt Matplotlib Example')
        self.draw()

    def plot_binned_data(self, spt_mat, tw):
        plot1 = self.figure.add_subplot(311)
        plot1.clear()
        plot1.set_title('Density plot (time window=' + str(tw) + ' ms')
        plot1.imshow(spt_mat, origin='lower', aspect='auto', interpolation=None, cmap='cividis')
        plot1.set_ylabel("Neuron Index")
        plot1.set_xlabel("Sample Index")
        self.draw()

    def plot_ranged_binned_data(self, spt_mat, start, end, tw):
        plot1 = self.figure.add_subplot(311)
        plot1.clear()
        plot1.set_title('Density plot (time window=' + str(tw) + ' ms')
        start /= 100
        end /= 100
        visible_time_bins = len(spt_mat[1])
        print(int(visible_time_bins*start))
        temp = spt_mat[0:5][int(visible_time_bins*start):int(visible_time_bins*end)]
        plot1.imshow(spt_mat[0:5][int(visible_time_bins*start):int(visible_time_bins*end)], origin='lower', aspect='auto', interpolation=None, cmap='cividis')
        plot1.set_ylabel("Neuron Index")
        plot1.set_xlabel("Sample Index")
        self.draw()

    def plot_z_norm(self, z_norm_mat):
        plot1 = self.figure.add_subplot(312)
        plot1.clear()
        plot1.set_title('Z-Normed Data')
        plot1.imshow(z_norm_mat, origin='lower', aspect='auto', interpolation=None, cmap='cividis')
        plot1.set_ylabel("Neuron Index")
        plot1.set_xlabel("Sample Index")
        self.draw()

    def plot_correlation_matrix(self, cov_mat):
        plot1 = self.figure.add_subplot(313)
        plot1.clear()
        plot1.set_title('Correlation Matrix')
        plot1.imshow(cov_mat, origin='lower', aspect='auto', interpolation=None, cmap='cividis')
        plot1.set_ylabel("Neuron Index")
        plot1.set_xlabel("Sample Index")
        self.draw()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
