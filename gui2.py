# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'NuDAS.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
# gui+
from NuDAS import NuDAS
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar

from matplotlib.figure import Figure
import random
import os
#import matlab.engine #matlab->octave
from oct2py import octave
import scipy.io
import matplotlib.pyplot as plt
import math
import shutil

import scipy.ndimage as ndimage



class Ui_MainWindow(object):

    # gui+
    def __init__(self):
        self.nudas = NuDAS()
        self.stimulus_file_path = ""
        self.spike_times_file_path = ""
        self.data_display_hbox = None
        self.graphs = None
        self.tables_vbox = None
        self.stimulus_table = None
        self.spike_table = None

        self.windows = []

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(1000, 750)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)
        self.centralwidget.setObjectName("centralwidget")
        # originally the horizontalLayout was a child of this horizontalLayoutWidget
        # instead of the centralWidget and all objects were being parents of
        # this widget even though I never made this extra widgetin the designer
        # because this widget's size is static relative to teh centralwidget it never
        # caused the objects to change size
        # self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        # self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 1981, 1361))
        # self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tableWidget.sizePolicy().hasHeightForWidth())
        self.tableWidget.setSizePolicy(sizePolicy)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.horizontalHeader().setStretchLastSection(False)
        self.verticalLayout_2.addWidget(self.tableWidget)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.spinBox_2 = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox_2.setObjectName("spinBox_2")
        self.horizontalLayout_2.addWidget(self.spinBox_2)
        self.spinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox.setObjectName("spinBox")
        self.horizontalLayout_2.addWidget(self.spinBox)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.verticalLayout_2.setStretch(1, 1)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalSlider_2 = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_2.setObjectName("horizontalSlider_2")
        self.verticalLayout.addWidget(self.horizontalSlider_2)
        self.horizontalSlider = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.verticalLayout.addWidget(self.horizontalSlider)
        # self widget is the widget containing all of the widgets for the right graphing half of the application
        self.widget = QtWidgets.QWidget(self.centralwidget)
        print(self.widget.size())
        self.widget.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.widget.setObjectName("widget")
        # gui+ ->
        self.graphs = PlotCanvas(self.centralwidget, self, width=10,
                                           height=20)
        # this was not here before
        # TODO: DELETE self.widget its obsolete now because the graphs no longer need a parent
        self.verticalLayout.addWidget(self.graphs)
        # gui+ <-
        self.verticalLayout.addWidget(self.widget)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.horizontalLayout.setStretch(0, 1)
        self.horizontalLayout.setStretch(1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        # status and menu bars...
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 2000, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuTools = QtWidgets.QMenu(self.menubar)
        self.menuTools.setObjectName("menuTools")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpenStimulus = QtWidgets.QAction(MainWindow)
        self.actionOpenStimulus.setObjectName("actionOpenStimulus")
        self.actionOpenSpikes = QtWidgets.QAction(MainWindow)
        self.actionOpenSpikes.setObjectName("actionOpenSpikes")
        self.actionBinning = QtWidgets.QAction(MainWindow)
        self.actionBinning.setObjectName("actionBinning")
        self.actionZ_Score = QtWidgets.QAction(MainWindow)
        self.actionZ_Score.setObjectName("actionZ_Score")
        # gui+ ->
        self.actionOpenNewWindow = QtWidgets.QAction(MainWindow)
        self.actionOpenNewWindow.setObjectName("actionOpenNewWindow")
        self.actionExportGraphs = QtWidgets.QAction(MainWindow)
        self.actionExportGraphs.setObjectName("actionExportGraphs")
        self.actionCorrelationMatrix = QtWidgets.QAction(MainWindow)
        self.actionCorrelationMatrix.setObjectName("actionCorrelationMatrix")
        self.actionGrangerFunction = QtWidgets.QAction(MainWindow)
        self.actionGrangerFunction.setObjectName("actionGrangerFunction")
        self.actionAssemblyFunction = QtWidgets.QAction(MainWindow)
        self.actionAssemblyFunction.setObjectName("actionAssemblyFunction")
        self.actionSmoothingFunction = QtWidgets.QAction(MainWindow)
        # self.actionSmoothingFunction.setObjectName("actionSmoothingFunction")
        # <-
        self.menuFile.addAction(self.actionOpenStimulus)
        self.menuFile.addAction(self.actionOpenSpikes)
        self.menuTools.addAction(self.actionBinning)
        self.menuTools.addAction(self.actionZ_Score)
        # gui+ ->
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionOpenNewWindow)
        self.menuFile.addAction(self.actionExportGraphs)
        # self.menuTools.addAction(self.actionSmoothingFunction)
        self.menuTools.addAction(self.actionCorrelationMatrix)
        self.menuTools.addAction(self.actionGrangerFunction)
        self.menuTools.addAction(self.actionAssemblyFunction)
        # <-
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # gui+
        # File connections
        self.actionOpenStimulus.triggered. \
            connect(lambda: self.open_file_dialog("Open Stimulus File", "Image Files (*.mat)", 0))

        self.actionOpenSpikes.triggered. \
            connect(lambda: self.open_file_dialog("Open Action Potential File", "Image Files (*.mat)", 1))

        self.actionOpenNewWindow.triggered. \
            connect(lambda: self.open_new_window())

        # Tools connections
        self.actionBinning.triggered. \
            connect(lambda: self.bin_data())

        self.actionZ_Score.triggered. \
            connect(lambda: self.z_score())

        self.actionCorrelationMatrix.triggered. \
            connect(lambda: self.correlation_matrix())

        self.actionGrangerFunction.triggered. \
            connect(lambda: self.granger())

        self.actionAssemblyFunction.triggered. \
            connect(lambda: self.assembly())

        self.actionExportGraphs.triggered. \
            connect(lambda: self.open_file_dialog(c="Select Destination Folder", f='', dialog_type=2))

        # self.actionSmoothingFunction.triggered. \
        #     connect(lambda: self.smoothing())



        # gui+
        self.label.setText("No Binned Data to Display")
        # Sliders connections
        # top
        self.horizontalSlider_2.setValue(0)
        self.horizontalSlider_2.valueChanged.connect(lambda: self.top_slider_changed())
        # bottom
        self.horizontalSlider.setValue(99)
        self.horizontalSlider.valueChanged.connect(lambda: self.bottom_slider_changed())
        # Spin Boxes
        self.spinBox_2.valueChanged.connect(lambda: self.left_spinbox_changed())
        self.spinBox.valueChanged.connect(lambda: self.right_spinbox_changed())
        self.spinBox_2.setMinimum(1)
        self.spinBox.setMinimum(1)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "NuDAS"))
        self.label.setText(_translate("MainWindow", "TextLabel"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuTools.setTitle(_translate("MainWindow", "Tools"))
        self.actionOpenStimulus.setText(_translate("MainWindow", "Open Stimulus File"))
        self.actionOpenStimulus.setStatusTip(_translate("MainWindow", "Imports and displays the .mat file containing the trigger stimulus data."))
        self.actionOpenSpikes.setText(_translate("MainWindow", "Open Spikes File"))
        self.actionBinning.setText(_translate("MainWindow", "Binning"))
        self.actionZ_Score.setText(_translate("MainWindow", "Z-Score"))
        # gui+
        self.actionOpenNewWindow.setText(_translate("MainWindow", "Open New Window"))
        self.actionExportGraphs.setText(_translate("MainWindow", "Export Graphs"))
        self.actionCorrelationMatrix.setText(_translate("MainWindow", "Correlation Matrix"))
        self.actionGrangerFunction.setText(_translate("MainWindow", "Granger Causality"))
        self.actionAssemblyFunction.setText(_translate("MainWindow", "Assembly"))
        # self.actionSmoothingFunction.setText(_translate("MainWindow", "Smoothing"))

    # gui+
    def open_new_window(self):
        self.windows.append((QtWidgets.QMainWindow(), Ui_MainWindow()))
        other_main_window = self.windows[-1][0]
        other_ui_main_window = self.windows[-1][1]
        self.ui = Ui_MainWindow()
        other_ui_main_window.setupUi(other_main_window)
        other_main_window.show()

    # gui+
    def open_file_dialog(self, c, f, dialog_type):
        if dialog_type == 0:
            self.stimulus_file_path, x = QtWidgets.QFileDialog.getOpenFileName(self.centralwidget,
                                                                     c,
                                                                     "",
                                                                     f)

            self.nudas.stimulus_to_npy_tk(self.stimulus_file_path)

        elif dialog_type == 1:
            self.spike_times_file_path, x = QtWidgets.QFileDialog.getOpenFileName(self.centralwidget,
                                                                        c,
                                                                        "",
                                                                        f)

            self.nudas.spike_times_to_npy_tk(self.spike_times_file_path)

        elif dialog_type == 2:
            dir = QtWidgets.QFileDialog.getExistingDirectory(self.centralwidget,
                                                             c,
                                                             "",
                                                             QtWidgets.QFileDialog.ShowDirsOnly
                                                             | QtWidgets.QFileDialog.DontResolveSymlinks
                                                             )

            for root, dirs, files in os.walk('plot_images'):
                for file in files:
                    shutil.copy(os.path.join(root, file), dir)

            if os.path.isfile('correlation_matrix.npy'):
                shutil.copy('correlation_matrix.npy', dir)

            if os.path.isfile('z_scored_matrix.npy'):
                shutil.copy('z_scored_matrix.npy', dir)

            if os.path.isfile('neural_data_path.npy'):
                shutil.copy('neural_data_path.npy', dir)

            if os.path.isfile('trigger_path.npy'):
                shutil.copy('trigger_path.npy', dir)

            if os.path.isfile('./causal_map.mat'):
                shutil.copy('./causal_map.mat', dir)


    # gui+
    # c is for comb. it's like some kind of matplotlib backend for embedding graphs
    def bin_data(self, c=0):
        print(self.centralwidget.geometry())
        if self.stimulus_file_path == "" or self.spike_times_file_path == "":
            msg = "First, you must load the stimulus and action potential data (which can be accessed under the " + \
                  "File menu) to bin any data"
            msg_box = QtWidgets.QMessageBox()
            msg_box.setIcon(QtWidgets.QMessageBox.Information)
            msg_box.setText(msg)
            msg_box.exec_()
        else:
            # TODO tw or time_window will have to be a user specified value from the GUI
            bin_window = 100
            # start_time, okPressed = QInputDialog.getInt(self.centralwidget, "Starting Time", "Milliseconds:", 0, 0,
            #                                             10000, 1)
            # end_time, okPressed = QInputDialog.getInt(self.centralwidget, "Ending Time", "Milliseconds:", 100, 0,
            #                                             10000, 1)
            bin_window, okPressed = QtWidgets.QInputDialog.getInt(self.centralwidget, "Time Window", "Milliseconds:", 100, 0, 10000, 1)
            self.nudas.bin_window = bin_window
            spt_mat = self.nudas.bin_data_tk(bin_window)
            dim = spt_mat.shape
            self.tableWidget.setRowCount(dim[1])
            self.tableWidget.setColumnCount(dim[0])
            print(self.tableWidget)

            table_title = "File: " + os.path.basename(self.spike_times_file_path)
            table_title = table_title + "\nNumber of Neurons: " + str(dim[0]) + "\nNumber of Time Bins: " + str(dim[1])
            self.label.setText(table_title)
            for i in range(dim[1]):
                for j in range(dim[0]):
                    table_item = QtWidgets.QTableWidgetItem(str(spt_mat[j][i]))
                    self.tableWidget.setItem(i, j, table_item)

            self.graphs.plot_binned_data(spt_mat, bin_window)
            self.spinBox_2.setMaximum(dim[1])
            self.spinBox.setMaximum(dim[0])
            print(spt_mat)
            return

    def smoothing(self):
        s, okPressed = QtWidgets.QInputDialog.getInt(self.centralwidget, "Standard Deviation", "Milliseconds:", 100,
                                                              0, 10000, 1)

        img = self.nudas.load_npy_spike_times_tk('/spike_times_good_clust.mat', 0)

        spt_mat = ndimage.gaussian_filter(img, sigma=(s, 0, 0), order=0)

        self.graphs.plot_smoothed_data(spt_mat, s)

        dim = spt_mat.shape
        self.tableWidget.setRowCount(dim[1])
        self.tableWidget.setColumnCount(dim[0])
        print(self.tableWidget)

        table_title = "File: " + os.path.basename(self.spike_times_file_path)
        table_title = table_title + "\nNumber of Neurons: " + str(dim[0]) + "\nNumber of Time Bins: " + str(dim[1])
        self.label.setText(table_title)
        for i in range(dim[1]):
            for j in range(dim[0]):
                table_item = QtWidgets.QTableWidgetItem(str(spt_mat[j][i]))
                self.tableWidget.setItem(i, j, table_item)
        return



    # gui+
    def z_score(self):
        z_scored_mat = self.nudas.z_scoring_tk()
        # print(self.nudas.z_scoring_tk())
        # graph this

        dim = z_scored_mat.shape
        self.tableWidget.setRowCount(dim[1])
        self.tableWidget.setColumnCount(dim[0])
        print(self.tableWidget)

        table_title = "File: " + os.path.basename(self.spike_times_file_path)
        table_title = table_title + "\nNumber of Neurons: " + str(dim[0]) + "\nNumber of Samples: " + str(dim[1])
        self.label.setText(table_title)
        for i in range(dim[1]):
            for j in range(dim[0]):
                table_item = QtWidgets.QTableWidgetItem(str(z_scored_mat[j][i]))
                self.tableWidget.setItem(i, j, table_item)

        self.spinBox_2.setMaximum(dim[1])
        self.spinBox.setMaximum(dim[0])

        self.graphs.plot_z_norm(z_scored_mat)
        print(z_scored_mat)
        return


    # gui+
    def correlation_matrix(self):
        cov_mat = self.nudas.covariance_matrix()
        # graph the covariance matrix
        if cov_mat is not None:
            self.graphs.plot_correlation_matrix(cov_mat)

    # gui+
    def granger(self):
#        eng = matlab.engine.start_matlab() #matlab->octave
        octave.addpath(os.getcwd())
        # out = eng.run_granger()
        # print(out)
        tgt = "run_granger.m"
        # this will cause an error because i am using the octave engine instead
        # of the matlab engine. the octave engine does not support all of
        # matlab's functionality. in this example, i have run into one of these
        # inconsistencies in an attempt in `CausalTest.m` t invoke the 
        # `chi2inv` function.
        # chi2inv is a builtin function in matlab: https://www.mathworks.com/help/stats/chi2inv.html
        # i will probbaly have to implement this function in matlab and add it
        # to my project's directory.
        octave.run(tgt)

        path='./causal_map.mat'
        if os.path.exists(path):
            mat = scipy.io.loadmat(path)
            granger_mat = mat['Psi2']
            if granger_mat is not None:
                self.graphs.plot_granger_matrix(granger_mat)
            else:
                print("NOT WORKING 2")
        else:
            print('NOT WORKING')


        return
        # matlab_program = "eng." + tgt + "(" + str(i) + ")"
        # exec(matlab_program)

        spt_mat = self.nudas.load_npy_spike_times_tk("./output.mat", 0)
        dim = spt_mat.shape
        for i in range(dim[1]):
            for j in range(dim[0]):
                table_item = QtWidgets.QTableWidgetItem(str(spt_mat[j][i]))
                self.tableWidget.setItem(i, j, table_item)
        return

    # gui+
    def assembly(self):
        assembly_mat = self.nudas.assembly()
        self.graphs.plot_assembly_matrix(assembly_mat.transpose())
        return


    #gui+
    def top_slider_changed(self):
        top_val = self.horizontalSlider_2.value()
        bot_val = self.horizontalSlider.value()
        if top_val >= bot_val:
            top_val = bot_val-1
            self.horizontalSlider_2.setValue(top_val)
        if self.nudas.bin_window != -1:
            # self.graphs.plot_ranged_binned_data(self.nudas.bin_data_tk(self.nudas.bin_window), top_val, bot_val, self.nudas.bin_window)
            self.graphs.plot_ranged_binned_data(top_val, bot_val)

    # gui+
    def bottom_slider_changed(self):
        bot_val = self.horizontalSlider.value()
        top_val = self.horizontalSlider_2.value()
        if top_val >= bot_val:
            bot_val = top_val+1
            self.horizontalSlider.setValue(bot_val)
        if self.nudas.bin_window != -1:
            # self.graphs.plot_ranged_binned_data(self.nudas.bin_data_tk(self.nudas.bin_window), top_val, bot_val, self.nudas.bin_window)
            self.graphs.plot_ranged_binned_data(top_val, bot_val)

    # gui+
    def left_spinbox_changed(self):
        row_idx = self.spinBox_2.value()
        col_idx = self.tableWidget.currentColumn()
        if row_idx <= self.tableWidget.rowCount():
            self.tableWidget.setCurrentCell(row_idx-1, col_idx)

    # gui+
    def right_spinbox_changed(self):
        col_idx = self.spinBox.value()
        row_idx = self.tableWidget.currentRow()
        if col_idx <= self.tableWidget.columnCount():
            self.tableWidget.setCurrentCell(row_idx, col_idx-1)


# gui+
# FigureCanvas in Qt Tuttorial: https://www.geeksforgeeks.org/how-to-embed-matplotlib-graph-in-pyqt5/
# subplot indexing: https://www.codespeedy.com/use-add_subplot-in-matplotlib/#:~:text=The%20add_subplot%20%28%29%20has%203%20arguments.%20The%20first,above%20is%3A%20from%20matplotlib%20import%20pyplot%20as%20plt
# self.figure.add_subplot(rows in grid, cols in grid, idx)
class PlotCanvas(FigureCanvas):
    def __init__(self, parent=None, umw=None, width=5, height=10, dpi=100):

        FigureCanvas.__init__(self, Figure(figsize=(width, height), dpi=dpi))
        self.setParent(parent)

        FigureCanvas.setSizePolicy(self, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        FigureCanvas.updateGeometry(self)


        self.ui_main_window = umw
        self.plot_obj = None
        self.cb = None
        self.axis = None

        self.current_mat = None
        self.graph_title = ''
        self.x_label = ''
        self.y_label = ''
        self.ix = 0
        self.iy = 0
        self.st = 0
        self.ed = 1

        # this is the Navigation widget
        # it takes the FigureCanvas widget and the parent
        self.toolbar = NavigationToolbar(self, self)

        self.mpl_connect('button_press_event', self.on_click)

        # create the folder that will store the resultant graphs
        if not os.path.isdir('plot_images'):
            os.mkdir('plot_images')

    def on_click(self, event):
        self.ix, self.iy = math.ceil(event.xdata), math.ceil(event.ydata)
        print(self.ix, self.iy)
        if self.ix < self.ui_main_window.tableWidget.rowCount() and self.iy <=self.ui_main_window.tableWidget.columnCount():
            self.ui_main_window.tableWidget.setCurrentCell(self.ix, self.iy)
        return

    def plot_1D(self, binned_data):
        keys = list(binned_data)
        i = 1
        for k in keys:
            ax = self.figure.add_subplot(len(keys), 1, i)
            ax.plot(binned_data[k], 'r-')
            ax.set_title('Neuron ' + str(k))
            i += 1
        self.draw()

    def plot(self):
        data = [random.random() for i in range(25)]
        ax = self.figure.add_subplot(211)
        ax.plot(data, 'r-')
        ax.set_title('PyQt Matplotlib Example')
        self.draw()

    def plot_binned_data(self, spt_mat, tw):
        # TODO: for some reason i have 2 graph bin functions. the other 
        # function is called plot_ranged_binned_data() if i could wrap these
        # 2 functions into a single function, that would help simplify my logic
        # i must havereally been going through it when coding this because 
        # everything is so sloppy and has no order or comments.
        # i attempted a quick fix below, but the graph didn't show up.
#        plot_ranged_binned_data(0, spt_mat.shape[1])
#        return
        self.figure.clear()
        self.plot_obj = self.figure.add_subplot(111)
        self.plot_obj.clear()
        self.graph_title = 'Density plot (time window=' + str(tw) + ' ms'
        self.x_label = 'Sample Index'
        self.y_label = 'Neuron Index'
        self.plot_obj.set_title(self.graph_title)
        im = self.plot_obj.imshow(
            spt_mat,
            origin='lower',
            aspect='auto',
            interpolation='none',
            cmap='cividis'
        )
        self.cb = self.figure.colorbar(im)
        self.plot_obj.set_ylabel(self.y_label)
        self.plot_obj.set_xlabel(self.x_label)
        self.figure.savefig('plot_images/plot_binned_matrix.png')
        self.draw()

        self.current_mat = spt_mat
        return

    def plot_smoothed_data(self, spt_mat, tw):
        self.figure.clear()
        self.plot_obj = self.figure.add_subplot(111)
        self.plot_obj.clear()
        self.graph_title = 'Density plot (standard deviation=' + str(tw) + ' ms'
        self.x_label = 'Sample Index'
        self.y_label = 'Neuron Index'
        self.plot_obj.set_title(self.graph_title)
        im = self.plot_obj.imshow(spt_mat, origin='lower', aspect='auto', interpolation=None, cmap='cividis')
        self.cb = self.figure.colorbar(im)
        self.plot_obj.set_ylabel(self.y_label)
        self.plot_obj.set_xlabel(self.x_label)
        self.figure.savefig('plot_images/plot_smoothed_matrix.png')
        self.draw()

        self.current_mat = spt_mat
        return



    def plot_ranged_binned_data(self, start, end):
        self.figure.clear()
        self.plot_obj = self.figure.add_subplot(111)
        self.plot_obj.clear()
        self.plot_obj.set_title(self.graph_title)
        start /= 100
        end /= 100
        self.st = start
        self.ed = end

        visible_time_bins = len(self.current_mat[1])
        # print(int(visible_time_bins*start))
        # temp = spt_mat[0:5][int(visible_time_bins*start):int(visible_time_bins*end)]
        im = self.plot_obj.imshow(
            self.current_mat[:, int(visible_time_bins*start):int(visible_time_bins*end)], 
            origin='lower', 
            aspect='auto',
            interpolation='none',
            cmap='cividis'
        )
        cb = self.figure.colorbar(im)

        self.plot_obj.set_ylabel(self.y_label)
        self.plot_obj.set_xlabel(self.x_label)
        self.draw()


    def plot_z_norm(self, z_norm_mat):
        self.figure.clear()
        self.plot_obj = self.figure.add_subplot(111)
        self.plot_obj.clear()
        self.graph_title = 'Z-Normed Data'
        self.x_label = 'Sample Index'
        self.y_label = 'Neuron Index'
        self.plot_obj.set_title(self.graph_title)
        im = self.plot_obj.imshow(
            z_norm_mat,
            origin='lower',
            aspect='auto',
            interpolation='none',
            cmap='cividis'
        )
        self.cb = self.figure.colorbar(im)
        self.plot_obj.set_ylabel(self.y_label)
        self.plot_obj.set_xlabel(self.x_label)
        self.figure.savefig('plot_images/plot_z_norm.png')
        self.draw()

        self.current_mat = z_norm_mat
        return

    def plot_correlation_matrix(self, cov_mat):
        self.figure.clear()
        self.plot_obj = self.figure.add_subplot(111)
        self.plot_obj.clear()
        self.graph_title = 'Correlation Matrix'
        self.x_label = 'Sample Index'
        self.y_label = 'Neuron Index'
        self.plot_obj.set_title(self.graph_title)
        im = self.plot_obj.imshow(cov_mat, origin='lower', aspect='auto', interpolation=None, cmap='cividis')
        self.cb = self.figure.colorbar(im)
        self.plot_obj.set_xlabel(self.x_label)
        self.plot_obj.set_ylabel(self.y_label)
        self.figure.savefig('plot_images/plot_correlation_matrix.png')
        self.draw()

        self.current_mat = cov_mat
        return

    def plot_granger_matrix(self, psi_2_mat):
        self.figure.clear()
        self.plot_obj = self.figure.add_subplot(111)
        self.plot_obj.clear()
        self.graph_title = 'Granger Matrix'
        self.x_label = 'Trigger Neuron Index'
        self.y_label = 'Target Neuron Index'
        self.plot_obj.set_title(self.graph_title)
        im = self.plot_obj.imshow(psi_2_mat, origin='lower', aspect='auto', interpolation=None, cmap='cividis')
        self.cb = self.figure.colorbar(im)
        self.plot_obj.set_xlabel(self.x_label)
        self.plot_obj.set_ylabel(self.y_label)
        self.figure.savefig('plot_images/plot_granger_matrix.png')
        self.draw()

        self.current_mat = psi_2_mat
        return

    def plot_assembly_matrix(self, assembly_mat):
        self.figure.clear()
        self.plot_obj = self.figure.add_subplot(111)
        self.plot_obj.clear()
        self.graph_title = 'Independent Components'
        self.x_label = 'Assemblies'
        self.y_label = 'Neuron Index'
        self.plot_obj.set_title(self.graph_title)
        im = self.plot_obj.imshow(
            assembly_mat,
            origin='lower',
            aspect='auto',
            interpolation='none',
            cmap='cividis'
        )
        self.cb = self.figure.colorbar(im)
        self.plot_obj.set_xlabel(self.x_label)
        self.plot_obj.set_ylabel(self.y_label)
        self.figure.savefig('plot_images/plot_assembly_matrix.png')
        self.draw()

        self.current_mat = assembly_mat
        return

    def __del__(self):
        shutil.rmtree('plot_images')
        return



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
